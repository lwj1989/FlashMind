# Go语言基础
Go语言的垃圾回收机制是如何工作的？
---
Go语言使用**三色标记清除算法**进行垃圾回收。主要步骤包括：

1. **标记阶段**：从根对象开始，将可达对象标记为灰色
2. **扫描阶段**：将灰色对象引用的对象标记为灰色，并将原灰色对象标记为黑色  
3. **清除阶段**：回收所有白色（未标记）对象

Go的GC是并发执行的，可以与用户程序同时运行。
===
什么是`interface{}`？
---
`interface{}`是Go语言中的**空接口**，它可以存储任意类型的值。

- 空接口不包含任何方法
- 任何类型都实现了空接口
- 常用于需要处理未知类型的场景

```go
var x interface{} = 42
var y interface{} = "hello"
```

# 并发编程
Go语言的并发原语有哪些？
---
Go语言的主要**并发原语**包括：

1. **goroutine**：轻量级线程
2. **channel**：用于goroutine间通信的通道

3. **select**：多路复用，用于处理多个channel操作
4. **sync包**：提供同步原语（Mutex、WaitGroup、RWMutex等）

```go
go func() {
    // 这是一个goroutine
}()
```
===
什么是channel？
---
Channel是Go语言中用于**goroutine间通信**的机制。

**特点：**
- 类型安全的消息传递
- 支持同步和异步通信
- 可以是有缓冲或无缓冲的

**基本用法：**
```go
ch := make(chan int)    // 无缓冲channel
ch := make(chan int, 5) // 有缓冲channel

ch <- 42    // 发送
x := <-ch   // 接收
```
